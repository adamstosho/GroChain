// Test script to verify the location fix is working
const axios = require('axios')

const API_BASE_URL = 'http://localhost:5000/api'

async function testLocationFix() {
  console.log('üß™ Testing Location Fix')
  console.log('=======================')

  try {
    // Test 1: Check the specific product detail
    console.log('\n1Ô∏è‚É£ Testing Product Detail API...')
    const response = await axios.get(`${API_BASE_URL}/marketplace/listings/68b6125e7ce0a13ef96208d2`)

    if (response.status === 200 && response.data.status === 'success') {
      const product = response.data.data
      console.log('‚úÖ Product detail API working')

      console.log('\nüìã Product Information:')
      console.log(`   ‚Ä¢ Name: ${product.cropName || product.name}`)
      console.log(`   ‚Ä¢ Price: ‚Ç¶${product.basePrice || product.price}`)
      console.log(`   ‚Ä¢ Location (raw):`, product.location)

      // Check if location is properly formatted
      if (product.location && typeof product.location === 'object') {
        console.log('‚úÖ Location is properly formatted as object:')
        console.log(`   ‚Ä¢ City: ${product.location.city}`)
        console.log(`   ‚Ä¢ State: ${product.location.state}`)
        console.log(`   ‚Ä¢ Country: ${product.location.country || 'Nigeria'}`)
      } else {
        console.log('‚ùå Location is not properly formatted')
      }

    } else {
      console.log('‚ùå Product detail API failed')
    }

    // Test 2: Check the listings API
    console.log('\n2Ô∏è‚É£ Testing Listings API...')
    const listingsResponse = await axios.get(`${API_BASE_URL}/marketplace/listings?page=1&limit=3`)

    if (listingsResponse.status === 200 && listingsResponse.data.status === 'success') {
      const listings = listingsResponse.data.data.listings
      console.log('‚úÖ Listings API working')
      console.log(`üì¶ Retrieved ${listings.length} listings`)

      // Check first listing's location
      if (listings.length > 0) {
        const firstListing = listings[0]
        console.log('\nüìã First Listing Location:')
        console.log(`   ‚Ä¢ Name: ${firstListing.cropName || firstListing.name}`)
        console.log(`   ‚Ä¢ Location (raw):`, firstListing.location)

        if (firstListing.location && typeof firstListing.location === 'object') {
          console.log('‚úÖ First listing location is properly formatted:')
          console.log(`   ‚Ä¢ City: ${firstListing.location.city}`)
          console.log(`   ‚Ä¢ State: ${firstListing.location.state}`)
          console.log(`   ‚Ä¢ Country: ${firstListing.location.country || 'Nigeria'}`)
        } else {
          console.log('‚ùå First listing location is not properly formatted')
        }
      }
    } else {
      console.log('‚ùå Listings API failed')
    }

    console.log('\nüéâ LOCATION FIX TEST COMPLETE!')
    console.log('===============================')

    console.log('\n‚úÖ What was fixed:')
    console.log('   ‚Ä¢ Backend now parses location strings into objects')
    console.log('   ‚Ä¢ Frontend expects and receives proper location format')
    console.log('   ‚Ä¢ Location display should now show actual city/state')

    console.log('\nüöÄ Next Steps:')
    console.log('   1. Refresh the product detail page')
    console.log('   2. Location should now show actual city and state')
    console.log('   3. No more "Unknown City, Unknown State"')

  } catch (error) {
    console.error('‚ùå Test failed:', error.message)
    if (error.response) {
      console.log('Response status:', error.response.status)
      console.log('Response data:', error.response.data)
    }
  }
}

testLocationFix()

